<?php
/* ***********************************************************************************************
 *
 * Phoebius Framework v.1.2.0 Copyright (c) 2010 Scand Ltd.
 *
 * **********************************************************************************************
 *
 * Generated at 2010/05/09 17:23
 *
 * This is an auxiliary autogenerated file. Do not edit it as it can be regenerated implicitly!
 *
 ************************************************************************************************/

/**
 * Autogenerated class
 */
final class AnnouncementEntityLogicalSchema implements ILogicallySchematic
{
	private $propertyNames = array('id', 'text', 'date');

	/**
	 * Returns the name of the class representing an entity
	 * @return string
	 */
	function getEntityName()
	{
		return 'Announcement';
	}

	/**
	 * @return OrmEntity
	 */
	function getNewEntity()
	{
		return new Announcement;
	}

	/**
	 * @return OrmProperty|null
	 */
	function getIdentifier()
	{
		return new OrmProperty('id', array('id'), new FundamentalPropertyType(new DBType(DBType::UINT32, false, null, null, null, true)), new OrmPropertyVisibility(OrmPropertyVisibility::FULL), new AssociationMultiplicity(AssociationMultiplicity::ZERO_OR_ONE), false, true);
	}

	/**
	 * Gets the set of {@link OrmProperty}
	 * @return array
	 */
	function getProperties()
	{
		return array(
			'id' => $this->getIdentifier(),
			'text' => new OrmProperty('text', array('text'), new FundamentalPropertyType(new DBType(DBType::VARCHAR, false, null, null, null, false)), new OrmPropertyVisibility(OrmPropertyVisibility::FULL), new AssociationMultiplicity(AssociationMultiplicity::EXACTLY_ONE), false, false),
			'date' => new OrmProperty('date', array('date'), new BoxablePropertyType('Date', new DBType(DBType::DATE, false, null, null, null, false)), new OrmPropertyVisibility(OrmPropertyVisibility::FULL), new AssociationMultiplicity(AssociationMultiplicity::EXACTLY_ONE), false, false)
		);
	}

	/**
	 * @return OrmProperty
	 */
	function getProperty($name)
	{
		if (!in_array($name, $this->propertyNames)) {
			throw new ArgumentException('name', $name);
		}

		$properties = $this->getProperties();

		return $properties[$name];
	}
}

?>